/*
 * Polar XML Generator Tool developed by Francesco Baldan
 *
 * This tool generatate complete "theme_resources.xml" and "appmap.xml" files
 * from an "appfilter.xml" file.
 * The tool have been developed specially for Polar Dashboard by Aidan Follestad
 * and Tom Wellington
 * More info about the dashboard here: 
 * https://afollestad.github.io/polar-dashboard/
 * https://github.com/afollestad/polar-dashboard

 * Note that this is not finished yet. I want to add few things, like the possibility
 * to use it on appfilters not necessarily generated by Polar Dashboard, and to
 * save theme_resources option (at the top of the file) and add theme to the new
 * file.
 * The main goal is also to add a simple GUI :)
 */

package com.baldan.francesco;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Scanner;

/**
 *
 * @author Francesco
 */
public class PolarXMLGeneratorTool {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        
        /* The three strings contain the name of the file where the tool took
         * the infos (appfilter.xml) and of the two generated files (theme_resources.xml
         * and appmap.xml)
        */
        
        final String APPFILTER = "appfilter.xml";
        final String THEME_RESOURCES = "theme_resources.xml";
        final String APPMAP = "appmap.xml";
        
        /* Now I'm going to create four ArrayList that will contains some strings
         * extracted from the appfilter.xml file.
         * The first ArrayList contains all apps names
         * The second ArrayList contains all apps packages
         * The third ArrayList contains all apps activities
         * The fourth ArrayList contains all apps icon names
        */
        
        ArrayList<String> appNames = new ArrayList<String>();
        ArrayList<String> appPackages = new ArrayList<String>();
        ArrayList<String> appActivities = new ArrayList<String>();
        ArrayList<String> appIconNames = new ArrayList<String>();
        
        /* I'm going to create a variable that will help us with the switch */
        
        int switchHelper = 0;
        
        /* Also, I'm going to create an array containing some lines that will be
         * useful when we will create the xml files.
        */
        
        String[] xmlResources = {"<?xml version=\"1.0\" encoding=\"utf-8\"?>", // 0
                                 "<appmap>", // 1
                                 "<Theme version=\"1\">", // 2
                                 "<Label value=\"Polar\" />", // 3
                                 "<Wallpaper image=\"polar_wallpaper\" />", // 4
                                 "<LockScreenWallpaper image=\"polar_wallpaper\" />", // 5
                                 "<ThemePreview image=\"polar_preview\" />", // 6
                                 "<ThemePreviewWork image=\"polar_preview\" />", // 7
                                 "<ThemePreviewMenu image=\"polar_preview\" />", // 8
                                 "<DockMenuAppIcon selector=\"half_green\" />", // 9
                                 "</Theme>", // 10
                                 "</appmap>" // 11
                                 
        };
        
        /* Now I'm going to read the appfilter.xml file and generate theme_resources.xml
         * and appmap.xml files.
         * Before create the theme_resources.xml file the tool check if a theme_resources.xml
         * files is alredy in the folder. If it is, the tool extract some infos from the file
        */
        
        File inputFile = new File(APPFILTER);
        Scanner appfilter = new Scanner(inputFile);
        PrintWriter theme_resources = new PrintWriter(THEME_RESOURCES);
        PrintWriter appmap = new PrintWriter(APPMAP);
        
        /* Let's extract some infos from appfilter.xml file!
        */
        
        while (appfilter.hasNextLine()) {
            String line = appfilter.nextLine();
            
            /* I'm going to do some simples ifs to check the type of the string
             * we have just read
             *
             * There are 4 ifs, the first one if the string is like
             * "<!-- Application Name -->", second one if the string is like
             * "component="ComponentInfo{com.company.app/com.company.app.ActivityName}"",
             * the third one if the string is like "drawable="icon_name" />" and
             * the last one if the string is empty or not needed.
            */
            
            if (line.length()>6 && line.charAt(5)=='!')
                switchHelper = 1;
            
            if (line.length()>6 && line.charAt(8)=='c' && line.charAt(9)=='o')
                switchHelper = 2;
            
            if (line.length()>6 && line.charAt(8)=='d')
                switchHelper = 3;
            
            if ("".equals(line) || (line.length()>6 && line.charAt(6)=='t'))
                switchHelper = 0;
            
            switch(switchHelper) {
                case 0:
                    break;
                case 1:
                    /* The final string contains the name of the app, and is
                     * added to the appNames ArrayList
                    */
                    appNames.add(line.substring(9).replace(" -->", ""));
                    break;
                case 2:
                    /* The final "line" string contains the package of the app, 
                     * and is added to the appPackages ArrayList
                     * The "activity" string contains the activity of the app, 
                     * and is added to the appActivities ArrayList
                    */
                    String activity = line.substring(line.indexOf('/'));
                    appPackages.add(line.substring(33).replace(activity, ""));
                    appActivities.add(activity.substring(1).replace("}\"", ""));
                    break;
                case 3:
                    /* The final string contains the name of the icon, and is
                     * added to the appIconNames ArrayList
                    */
                    appIconNames.add(line.substring(18).replace("\" />", ""));
                    break;
                default:
                    break;
            }
        }
        
        /* We finally have all infos we need from the appfilter.xml file!
         * Now it's time to generate the theme_resources.xml and appmap.xml
         * files.
        */
        
        /* Let's start with the theme_resources.xml file */
        
        /* Firstly we need to add some lines that are needed by LG Launcher */
        
        theme_resources.println(xmlResources[0]);
        theme_resources.println(xmlResources[2]);
        
        /* I'm going to use a for to add some lines, instead of lots of printlns */
        
        for (int i=0; i<7; i++)
            theme_resources.println("\t" + xmlResources[i + 3]);
        for (int i=0; i<appNames.size(); i++) {
          theme_resources.println("\n\t<!-- " + appNames.get(i) + " -->");
          theme_resources.println("\n\t<AppIcon name=\"" + appPackages.get(i) + "/" + appActivities.get(i) + "\"");
          theme_resources.println("\t\timage=\"" + appIconNames.get(i) + "\" />");
        }
        
        theme_resources.println("\n" + xmlResources[10]);
        
        /* Now it's time to create the appmap.xml file! */
        
        appmap.println(xmlResources[0]);
        appmap.println(xmlResources[1]);
        
        for (int i=0; i<appNames.size(); i++) {
          appmap.println("\n\t<!-- " + appNames.get(i) + " -->");
          appmap.println("\n\t<item class=\"" + appActivities.get(i) + "\"");
          appmap.println("\t\tname=\"" + appIconNames.get(i) + "\" />");
        }
        
        appmap.println("\n" + xmlResources[11]);
        
        /* Let's close all files objects */
        
        appfilter.close();
        appmap.close();
        theme_resources.close();
    }
    
}
